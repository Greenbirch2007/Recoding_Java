

第一个java程序

注：String args[]与String[]　args都可以执行，但是土建后者

javac t1.java
java t1

执行命令解析　　用到了两个命令: javac 和java

javac　后面跟着java文件的文件名，例如，t1.java．该命名用于将java源文件编译为class字节码文件，

运行javac命令后，如果成功编译没有错误的话，会出现一个t1.class文件

java后面跟着的是java文件中的类名，流入,t1是类名，

注意:java命令后面不要加.class

 
java简介

java分为三个体系:
1. JavaSE(J2SE)  java平台标准版
2. JavaEE（J2EE）  java平台企业版
3. JavaME(JME)  java平台微型版

主要特性

1. java语言是简单的

java的语法与c++接近，但是丢弃了c++的一些特性．java语言不使用指针，而是引用．并提供了自动的
废料收集，使得程序员不必为内存管理而担忧

２．　java是面向对象的

java提供类，接口和继承等面向对象的特性．只支持类之间的单继承，但支持接口之间的多继承，并支持
类与接口之间的实现机制(关键字为implements)java语言全面支持动态绑定，而c++语言值对虚函数
使用动态绑定．总之，java语言是一个纯的面向对象程序设计语言

３．java语言是分布式的

java语言支持Internet应用的开发，在基本的java应用编程接口中有一个网络应用编程接口(java net)
它提供了用于网络应用编程的类库,包括URL等．
java的RMI(远程方法激活)机制也是开发分布式应用的重要手段


4. java语言是健壮的
jav的强类型机制，异常处理，垃圾的自动收集等是java程序健壮性的重要保证．
对指针的丢弃是java的明智选择．java的安全检查机制使得java更具健壮性

５．java语言是安全的

java通常被用在网络环境中，为此，java提供了一个安全机制以防止恶意代码的攻击．除了java语言具有的
许多安全特性之外，java对通过网络下载的类具有一个安全防范机制(类ClassLoader),如分配不同的名字的
名字空间以防替代本地的同名类，字节代码检查，并提供安全管理机制(类SecurityManager)让
java应用设置安全哨兵

6. java语言是体系结构中立的

java程序(后缀为java的文件)在java平台上被编译为体系结构中立的字节码格式(后缀为class的文件)
，然后可以在实现这个java平台的任何系统中运行．这种途径适合于异构的网络环境和软件的分发

７．　java语言是可移植的

这种可移植型来源于体系结构中立性，另外，java还严格规定了各个基本数据类型的长度．java系统本身
也有很强的可移植性，java编译器是用java实现的，java的运行环境使用ANSI C实现的


8.  java语言是解释型的

java程序在java平台上被编译为字节码格式，然后可以在实现这个java平台的任何系统中运行．在运行时
java平台中的java解释器对这些字节码进行解释执行，执行过程中需要的类在联结阶段被载入到运行环境中

9.java是高性能的

与那些解释型的高级脚本语言相比，java的确是高性能的．事实上，java的运行速度随着JIT(Just-In-Time)
编译器技术的发展越来越接近与Ｃ++

10. java语言是多线程的

在java语言中，线程是一种特殊的对象，它必须由Thread类或其子(孙)类来创建．通常有两种方法来创建
线程:其一，使用型构为Thread(Runnable)的构造子将一个实现了Runnable接口的对象包装成一个线程，
其二，从Thread类派生出子类或重写run方法，使用该子类创建的对象即为线程．
注意，Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了
线程索要运行的代码．线程的活动一组方法来控制．java语言支持多个线程的同时执行，并提供多线程
之间的同步机制(关键字为synchronized)


11. java语言是动态的

java语言的设计目标之一是适应于动态变化的环境．java程序需要的类能够动态地被载入到运行环境，也可以
听过网络来载入需要的类，这也有利于软件的升级．另外，java中的类有一个运行时刻的表示，能进行运行时刻
的类型检查


发展历史


Java 开发环境配置

Windows 上安装开发环境
Linux 上安装开发环境
安装 Eclipse 运行 Java
Cloud Studio 在线运行 Java


Linux，UNIX，Solaris，FreeBSD环境变量设置
环境变量PATH应该设定为指向Java二进制文件安装的位置。如果设置遇到困难，请参考shell文档。

例如，假设你使用bash作为shell，你可以把下面的内容添加到你的 .bashrc文件结尾: export PATH=/path/to/java:$PATH


java基础语法

一个java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协调工作．
下面简要介绍一下类，对象，方法和实例对象的概念

对象：对象是类的一个实例，有状态的行为
类：类是一个模板，它描述一类对象的行为和状态
方法：方法就是行为，一个类可以有很多方法，逻辑运算，数据修改以及所有动作都是在方法中完成的
实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定

第一个java程序

基本语法

１．大小写敏感　
２．　类名:首字母必须大写
３．　方法名：所有的方法名都应小写字母开头
４．　源文件名：源文件名必须与类型相同，文件名的后缀为.java
5.  主方法入口:所有的java程序由public static void main(String []args)方法执行

java标识符

java所有的组成组成部分都需要名字．类名，变量名以及方法名都被称为标识符

１．所有的标识符都应该以字母，美元符号，或下划线开始
2.首字符之后可以是字母，下划线，或数字的任何组合
3.关键字不能用作标识符
4.标识符是大小写敏感的
5.合法标识符举例：age,$salary,_vaue,__1_value
6.　不合法的标识符举例：123ab,-a


java修饰符

像其他语言一样，java可以使用修饰符来修饰类中的方法和属性，主要有两类修饰符：
１．　访问控制修饰符：default ,public,protected,private
2. 非访问控制修饰符：　final,abstract,static,synchronized

java变量

java中主要有以下几种类型的变量：
１．局部变量
２．类变量(静态变量)
３．成员变量(非静态变量)

java数组

数组是存储在堆上的对象，可以保存多个同类型变量．后面会学到如何声明，构造以及初始化一个数组

java枚举

java5.0引入了枚举，枚举限制变量只能是预先设定好的值．使用枚举可以减少代码中的bug

注意：枚举可以单独声明或声明在类里面．方法，变量，构造函数也可以在美剧中定义


java关键字

类别　　　　　　　　　关键字　　　　　　　　说明

访问控制　　　　　　　private       　私有的
　　　　　　　　　　　protected      受保护的
　　　　　　　　　　　public        公共的


类，方法和变量
修饰符　　　　　　　　　abstract       声明抽象
　　　　　　　　　　　class        　类
                 extends          扩充继承
　　　　　　　　　　　final           最终值不可改变的
　　　　　　　　　　　　implements     实现(接口)
　　　　　　　　　　　　interface        接口
                    native         本地，原生方法(非java实现)
　　　　　　　　　　　　　new          新，创建
　　　　　　　　　　　　　static        静态
　　　　　　　　　　　　　strictfp        严格，精准
　　　　　　　　　　　　　synchronized       线程，同步
　　　　　　　　　　　　　　transient          短暂
　　　　　　　　　　　　　　　volatile         易失


程序控制语句　　　　　　　　　　break         跳出循环
　　　　　　　　　　　　　　　　　case     定义一个值以供switch选择
　　　　　　　　　　　　　　　　continue       继续
　　　　　　　　　　　　　　　　default        默认
　　　　　　　　　　　　　　　　do       　　　运行
　　　　　　　　　　　　　　　 else         否则
　　　　　　　　　　　　　　　　for        　循环
                           if           如果
　　　　　　　　　　　　　　　　instaceof        实例
　　　　　　　　　　　　　　　　　return           返回
                            switch          根据值选择执行
　　　　　　　　　　　　　　　　　　while         循环



错误处理　　　　　　　　　　　　　　assert            断言表达式是否为真
                           catch                捕捉异常
　　　　　　　　　　　　　　　　　　finanlly           有没有异常都执行
　　　　　　　　　　　　　　　　　throw              抛出一个异常对象
　　　　　　　　　　　　　　　　　throws            声明一个异常可能被抛出
　　　　　　　　　　　　　　　　　　　try          　　捕获异常

包相关　　　　　　　　　　　　　　　　import         引入
　　　　　　　　　　　　　　　　　　package         包

基本类型　　　　　　　　　　　　　boolean         布尔型
　　　　　　　　　　　　　　　　　byte            字节型
　　　　　　　　　　　　　　　　　char             字符型
　　　　　　　　　　　　　　　　　double           双精度浮点
                             float            单精度浮点数
                               int              整型
                               long              长整型
                               short              短整型


变量引用　　　　　　　　　　　　　　　　super           父类，超类
　　　　　　　　　　　　　　　　　　　　　this        　　本类
　　　　　　　　　　　　　　　　　　　　　void          无返回值



保留关键字　　　　　　　　　　　　　　　　　goto            是关键字，但不能使用
                                    const             是关键字，但不能使用
　　　　　　　　　　　　　　　　　　　　　null                空

java注释

类似c++，java也支持单行以及多行注释，注释中的字符将别java编译器忽略

java空行

空白行，或有注释的行，java编译器将会忽略掉


继承
在Java中，一个类可以由其他类派生．如果你要创建一个类，而且已经存在一个类具有你所需要的
属性或方法，那么你可以将新创建的类继承该类

利用继承的方法，可以重用已经存在的类的方法和属性，而不用重写这些代码．
被继承的类称为超类(super class)，派生类称为子类(subclass)

接口

在Java中，接口可以理解为对象间相互通信的协议．接口在继承中扮演很重要的角色
接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类

java源程序(.java)---编译---->字节码程序(.class)-----解释执行---->解释器－－－＞操作系统

Java对象和类

java作为一种面向对象语言，支持以下的概念
１．多态
２．　继承
３．封装
４．抽象
５．类
６．对象
７．实例
８．方法
９．重载


java中的类
类可以看成是java对象的模板
通过下面一个简单的类来理解java中的类定义

一个类可以包含以下类型变量:
1.局部变量：在方法，构造方法或语句块中定义的变量被成为局部变量．变量声明和初始化都是在方法中
，方法结束后，变量就会自动销毁
２．成员变量，成员变量是定义在类中，方法体之外的变量．这种变量在创建对象的时候实例化．
成员变量可以被类中方法，构造方法和特定类的语句块访问
３．类变量：类变量也声明在类中，方法体之外，但必须声明为static类型

一个类可以拥有多个方法，例子中,barking(),hungry(),sleep()都是Dog类的方法

构造方法

每个类都有构造方法．如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造
方法．在创建一个地下的时候，至少要调用一个构造方法．构造方法的名称必须与类同名
一个类可以有多个构造方法


创建对象

对象是根据类创建的．在Java中，使用关键字new来创建一个新的对象，创建对象需要三步：
１．声明：声明一个对象，包括对象名和对象类型
２．实例化：使用关键字new来创建一个对象
3. 初始化：使用new关键字创建对象时，会调用构造方法初始化对象

访问实例变量和方法

通过已经创建的对象来访问成员变量和成员方法，

实例　

下面的例子展示如何访问实例变量和调用成员方法

源文件声明规则

当一个源文件定义多个类，并且还有import 语句和package语句时，要注意
１．一个源文件中只能有一个public类
２．一个源文件可以有多个非public类
３．源文件的名称应该和public类的类名保持一致．例如，源文件中public类的类名是Employee,
那么源文件应该命名为Employee.java
4.如果一个类定义在某个包中，那么package语句应该在源文件的首行
5.如果源文件包含import语句，那么应该放在package语句和类定义之间．如果没有package语句，
那么import语句应该在源文件中最前面
６．import 语句和package语句对源文件中定义的所有类都有效．在同一个源文件中，不能
给不同的类不同的包声明

类有若干中访问级别，并且类也分不同的类型：抽象类和final类等，这些将在访问控制章节介绍
除了上面跳到的几种类型，java还有一些特殊的类，如内部类，匿名类

java包

包主要用来对类和接口进行分类．当开发java程序时，可能编写成百上千的类，因此有必要对类和接口进行雷锋

import 语句

在java语句中，如果给出一个完整的限定名，包括包名，类名，那么java编译器就可以很容易定位
到源代码或类．import语句就是用来提供一个合理的路径，使得编译器可以找到某个类

一个简单的例子
创建两个类Employee,EmployeeTest

Employee类有四个成员变量：name,age,designation,salary
该类显式声明了一个构造方法，该方法只有一个参数

程序都是从main方法开始执行．为了能运行这个程序，必须包含main方法并且创建一个实例对象
下面给出EmployeeTest类，该类实例化２个Employee类的示例，并调用方法设置变量的值


Java基本数据类型
变量就是申请内存来存储值．当创建变量的时候，需要在内存中申请空间
内存管理系统根据变量的类型为变量　分配存储空间，分配的空间只能用来存储该类型的数据

因此，通过定义不同的类型的变量，可以在内存中存储整数，小数，字符

java的两大数据类型
1.内置数据类型
２．引用数据类型

内置数据类型
java提供了８种基本类型．６中数字类型(4个整数型，２个浮点型)，一种字符类型，还有一种布尔类型


byte:

1.byte数据类型是８位，有符号的，以二进制补码表示的整数；
２．最小值是-128(-2^7);
3.最大值是127(2^7-1)
4.默认值是０
５．byte类型用在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一


short

1.short数据类型是16为，有符号的以二进制补码表示的整数
2.最小值是 －32768(-2^15)
3.最大值是　32767(2^15-1)
4.short数据类型也可以像byte那样节省空间．一个short变量是int型变量所占空间的二分之一
5.默认值是０


int

１．int数据类型是32位，有符号的以二进制补码表示的整数
2.最小值是-2147573648(-2^31)
3.最大值是2^31-
一般地整型默认为int类型
默认值是0
例子　int a = 88; int b =-9;


long

long 数据类型是 64 位、有符号的以二进制补码表示的整数；
最小值是 -9,223,372,036,854,775,808（-2^63）；
最大值是 9,223,372,036,854,775,807（2^63 -1）；
这种类型主要使用在需要比较大整数的系统上；
默认值是 0L；
例子： long a = 100000L，Long b = -200000L。
"L"理论上不分大小写，但是若写成"l"容易与数字"1"混淆，不容易分辩。所以最好大写。


float：

float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；
float 在储存大型浮点数组的时候可节省内存空间；
默认值是 0.0f；
浮点数不能用来表示精确的值，如货币；
例子：float f1 = 234.5f。

double：

double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；
浮点数的默认类型为double类型；
double类型同样不能表示精确的值，如货币；
默认值是 0.0d；
例子：double d1 = 123.4。


boolean：

boolean数据类型表示一位的信息；
只有两个取值：true 和 false；
这种类型只作为一种标志来记录 true/false 情况；
默认值是 false；
例子：boolean one = true。


char：

char类型是一个单一的 16 位 Unicode 字符；
最小值是 \u0000（即为0）；
最大值是 \uffff（即为65,535）；
char 数据类型可以储存任何字符；
例子：char letter = 'A';。


实例

对于数值类型的基本类型的取值范围，不需要强行记忆，因为它们的值以常量的形式定义在对应的包装类中

Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的"E+数字"表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。

实际上，java还在另外一种基本类型void,它也有对应的包装类java.lang.Void,不过我们无法直接对
它们进行操作


引用类型

在java中，引用类型的变量非常类似与Ｃ/C++的指针．引用类型指向一个对象，指向对象的变量是引用变量
这些变量在声明被指定为一个特定的类型，比如PTT等，
变量一旦声明后，类型就不能被改变了

对象，数组都是引用数据类型
所有引用类型的默认值都是null
一切引用变量可以用来引用任何与之兼容的类型

例如　Site site= new Site("Runoob")

java常量

常量在程序运行时是不能被修改的
在java中使用final关键字来修饰常量，声明方式和变量类似

final doubl PI = 3.41

虽然常量名也可以用小写，但是ｗｉｅｌｄ识别，通常使用大写字母表示常量
字面量可以赋给任何内置类型的变量
byte a = 68;
char a ="A"

byte,int,long,short都可以用十进制，１６进制，８进制的方式来表示
当使用常量的时候，前缀0表示８进制，前缀0x代表１６进制

int  decimal = 100;
int octal = 0144;
int hexa = 0x64;

和其他语言一样，java的字符常量也是包含在两个引号之间的字符串序列．

字符串常量和字符常量都可以包含任何Unicode字符

char a = '\u001'
String a = 'u\001'

java的一些其他转义字符序列

符号　　　　　　　　　字符含义

\n               换行(OxOa)
\r                回车(OxOd)
\f
\b
\o
\s
\t
\"





 