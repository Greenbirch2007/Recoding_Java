

java继承

类的继承格式

在java中通过extends关键字可以声明一个类是从另一个类继承而来额

class 父类{}
class　子类　extends 父类{}

java不支持多继承，单支持多重继承

继承的特性

１．子类拥有父类非private的属性，方法
２．子类可以拥有自己的属性和方法，即子类可以对父类进行扩展
３．子类可以用自己的方式实现父类方法的
４．提高了类之间的耦合性(继承的缺点，耦合度高就会造成代码之间的联系月紧密，代码独立型越差)

继承关键字
１．extends关键字
在java中，类的继承是单一继承，一个子类只能拥有一个父类，所以extends只能继承一个类
２．implements关键字

使用implements关键字可以变相的使用java具有多继承的特性，使用范围为类继承接口的情况，可以
同事继承多个接口(接口跟接口之间采用逗号分隔)

3.super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类
４．this关键字：指向自己的引用


５．finanl关键字声明类可以把类定义为不能继承的，即最终类，或用于修饰符方法，该方法不能被子类重写


java重写(override)与重载(overload)

重写与重载之间的区别
区别点	重载方法	重写方法
参数列表	必须修改	一定不能修改
返回类型	可以修改	一定不能修改
异常	可以修改	可以减少或删除，一定不能抛出新的或者更广的异常
访问	可以修改	一定不能做更严格的限制（可以降低限制）

方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。

(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。
(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。
(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。


java多态

多态就是同一个接口，使用不同的实例而执行不同操作


多态的优点
1. 消除类型之间的耦合关系
2. 可替换性
3. 可扩充性
4. 接口性
5. 灵活性
6. 简化性
多态存在的三个必要条件
继承
重写
父类引用指向子类对象


虚方法

多态的三种实现方式
１．重写
２．接口
３．抽象类和抽象方法


java抽象类

在Java语言中使用abstract class来定义抽象类
继承抽象类

抽象方法

抽象类总结规定
1. 抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。

2. 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。

3. 抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。

4. 构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。

5. 抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。


java封装
封装的优点
1. 良好的封装能够减少耦合。

2. 类内部的结构可以自由修改。

3. 可以对成员变量进行更精确的控制。

4. 隐藏信息，实现细节。


java接口（interface）

接口与类相似点：
一个接口可以有多个方法。
接口文件保存在 .java 结尾的文件中，文件名使用接口名。
接口的字节码文件保存在 .class 结尾的文件中。
接口相应的字节码文件必须在与包名称相匹配的目录结构中。
接口与类的区别：
接口不能用于实例化对象。
接口没有构造方法。
接口中所有的方法必须是抽象方法。
接口不能包含成员变量，除了 static 和 final 变量。
接口不是被类继承了，而是要被类实现。
接口支持多继承。


接口的声明

Java 包(package)
为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。

包的作用
1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。

2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。

3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。

Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。

包语句的语法格式为：

１．java.lang－－打包基础的类
２．java.io--包含输入输出功能的函数

