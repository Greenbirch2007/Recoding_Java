Java 条件语句 - if...else


一个if语句包含一个布尔表达式和一条或多条语句


if(布尔表达式){ //如果布尔表达式为true将执行的语句}

如果布尔表达式的值为true,则执行if语句中的代码块,否则执行if语句块后面的代码

if...else语句

if(布尔表达式){//如果布尔表达式的值为true}
else{//如果布尔表达式的值为false}


if...else if ...else语句
注意
1.if 语句至多有1个else语句,else语句在所有的else if语句之后
2.if 语句可以有若干个else if语句,它们必须在else语句之前
3. 一旦其中一个ele if 语句检测为true,其他的else if以及else语句都将跳过执行


if (布尔表达式1){//如果布尔表达式 1的值为true执行代码}
else if (布尔表达式2) {//如果布尔表达式2的值为true执行代码}
else if (布尔表达式3) {//如果布尔表达式3的值为true执行代码}
else{//如果以上布尔表示式都不为true执行代码}

嵌套的if...else语句

if(布尔表达式1){
//如果布尔表达式1的值为true执行代码}
if (布尔表达式2){
如果布尔表达式2的值为true执行代码}


java switch case语句

switch case语句判断一个变量与一系列值中某个值是否相等,每个值成为一个分支

语法

switch(expression){
case value:
 //语句
  break; //可选
case value:
// 语句
break; // 可选
// 你可以有任意数量的case语句
default://可选
//语句
}

1.switch语句可以拥有多个case语句.每个case后面跟一个要比较的值和冒号
2.switch语句中的值的数值类型必须与变量的数据类型相同,而且只能是常量或字面常量
3.当变量的值与case语句的值相等时,那么case语句之后的语句开始执行,直到break语句出现
才跳出switch语句
4.当遇到break语句时,switch语句终止.程序跳转到switch语句后面的语句执行.case语句
不必须要包含break语句.如果没有break语句出现,程序会继续执行下一条case语句,直到
出现break语句
5.switch语句可以包含一个default分支,该分支一般是switch语句的最后一个分支
(可以在任何位置,但建议在最后一个).default在没有case语句的值和变量值相等的
时候执行.default分支不需要break语句


switch case执行时,一定会先执行匹配,匹配成功返回当前的值,再根据是否有break,
判断是否继续输出,或跳出判断


如果case语句块中没有break语句时,JVM并不会顺序输出每一个case对应的返回值,而是继续
匹配,匹配不成功则返回默认case

如果case语句块中没有break语句时,匹配成功后,从当前case开始,后续所有case的值都会输出

java Number & Math类

一般的,当需要使用数字的时候.通常使用内置数据类型,如byte,int,long,double等
int a = 5000;
float b = 13.65f;
byte c = 0x4c

java语言为每一个内置数据类型提供了对应的包装类
所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。

这种由编译器特别支持的包装成为装箱,所以当内置数据类型被当做对象使用的时候,编译器会把
内置类型装箱为包装类.相似的,编译器也可以把一个对象拆箱为内置类型.
Number类属于java.lang包

当x被赋值为整型值时,由于x是一个对象,所以编译器要对x进行装箱.然后,为了使x能进行运算,
所以要对x进行拆箱

java Math类

java的Math包含了用于执行基本数学运算的属性和方法,如初等指数,对数,平方根和三角函数
math的方法被定义为static形式,通过math类可以在主函数中直接调用

Number &　Math类方法
１．　xxxValue()
2.   compareTo()
3. equals()
4. valueOf()
5.toString()
6.parseInt()
7.abs()
8. cell()
9. floor()
10. rint()
11. round()
12. min()
13. max()
14. exp()
15. log()
16. pow()
17. sqrt()
18. sin()
19. cos()
20. tan()
22.acos()
23.atan()
24.atan2()
25.toDegrees()
26.toRadians()
27.random()
Math 的 floor,round 和 ceil 方法实例比较

floor向下取整
round四舍五入
ceil向上取整


Java Character类
Character 类用于对单个字符进行操作
Character类在对象中包装一个基本类型char的值

java语言为内置数据类型char提供了包装类Character类
Character类提供了一系列方法来操纵字符．你可以使用Character的构造方法创建一个Ｃharacter类对象

Character ch = new Character("a");

例如,将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型
参数转换为Character对象．这种特征称为装箱，反过来称为拆箱

转义序列

前面有反斜杠(\)的字符代表转义字符，它对编译器来说有特殊含义

\t
\b
\n
\r
\f
\'
\"
\\

Character方法

１．　isLetter()
2. isDigit()
3. isWhitespace()
4. isUpperCase()
5.isLowerCase()


java String类


字符串广泛应用在java编程中，在java中字符串属于对象，java提供了String类来创建和操作字符串


创建字符串
String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:

注意，String类是不可改变的，所以一旦创建了String对象，那它的值就无法改变了
如果需要对字符串做很多修改，那么应该选择使用 StringBuffer & StringBuilder 类。

字符串长度

用于获取有关对象的信息的方法成称为访问器方法
String类的一个访问其方法是length()方法，它返回字符串对象包含的字符数

连接字符串

concat , + 

创建格式化字符串

输出格式化数字可以使用printf()和format()方法

java数组

声明数组变量
首先必须声明数组变量，才能在程序中使用数组．

dataType[] arrayRefVar; //首选的方法

或

处理数组

ｆor-each玄幻

for (type element:array){
System.out.println(element);}

数组作为函数的参数

Array类

java日期时间

Date()

java正则表达式

Java 方法

System.out.println()

1.println()是一个方法
２．System是系统类
３．out是标准输出对象

调用系统类System中的标准输出对象out中的方法println()

java是语句的集合，它们在一起执行一个功能
１．方法是解决一类问题的不走的有序组合
２．方法包含与类或对象中
３．方法子程序中被创建，在其他地方被引用


方法的命名规则
１．addPerson
2.testPo_eM

方法的定义

修饰符　返回值类型　方法名(参数类型　参数名){
方法体
return 返回值；}

方法包含一个方法头和方法体
１．修饰符：修饰符，这是可选额，告诉编译器如何调用该方法．定义了该方法的访问类型
２．返回值类型：方法可能会返回值．returnValueType是方法返回值的数据类型．
有些方法执行所需的操作，但没有返回值．这种情况下，returnValueType是关键字void
3.方法名：是方法的实际名称．方法名和参数表共同构成方法签名
４．参数类型：参数就像一个占位符．当方法被调用时，传递值给参数．这个值被称为实或变量
参数列表是指方法的参数类型，顺序和参数的个数．参数是可选的，方法可以不包含任何参数
５．方法体：方法体包含具体的语句，定义该方法的功能

注意：
一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程

方法调用

当方法返回一个值的时候，方法调用通常被当做一个值
int larger = max(30,40);
如果方法返回值是void，方法调用一定是一条语句，例如，方法println返回void
System.out.println("菜鸟教程");

带修饰符public和static，返回void类型值，方法名字是ｍain,此外带一个String[]类型参数
，Strring

java流(stream),文件(file)和io

java Scanner类型

next() 与 nextLine() 区别
next():

1、一定要读取到有效字符后才可以结束输入。
2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。
3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。
next() 不能得到带有空格的字符串。
nextLine()：

1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。
2、可以获得空白。

java异常处理

Exception 类的层次
所有的异常类是从 java.lang.Exception 类继承的子类。

Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。

Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。

Error 用来指示运行时环境发生的错误。

例如，JVM 内存溢出。一般地，程序不会从错误中恢复。

异常类有两个主要的子类：IOException 类和 RuntimeException 类。

捕捉异常
try
{
   // 程序代码
}catch(ExceptionName e1)
{
   //Catch 块
}
